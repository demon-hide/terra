#line 2
// Based on: https://github.com/wwwtyro/glsl-atmosphere/blob/master/index.glsl
#define PI 3.141592
#define iSteps 4
#define jSteps 4

uniform float planetRadius;
uniform float atmosphereRadius;

uniform sampler2D transmittance;
uniform sampler3D inscattering;

uniform mat4 worldToWarped;

const vec3 rayleigh_Bs = vec3(5.8e-6, 13.5e-6, 33.1e-6);


float rayleigh_phase(float mu) {
	return 3.0 / (16.0 * PI) * (1.0 + mu * mu);
}
float mie_phase(float mu) {
	float g = 0.76;

	return 3.0 / (8.0 * PI) * ((1.0 - g * g) * (1.0 + mu * mu))
		/ ((2.0 + g * g) * pow(1.0 + g * g - 2.0 * g * mu, 1.5));
}

vec2 rsi(vec3 r0, vec3 rd, float sr) {
    // ray-sphere intersection that assumes
    // the sphere is centered at the origin.
    // No intersection when result.x > result.y
    float a = dot(rd, rd);
    float b = 2.0 * dot(rd, r0);
    float c = dot(r0, r0) - (sr * sr);
    float d = (b*b) - 4.0*a*c;
    if (d < 0.0) return vec2(1e5,-1e5);
    return vec2(
        (-b - sqrt(d))/(2.0*a),
        (-b + sqrt(d))/(2.0*a)
    );
}

vec3 atmosphere(vec3 r0, vec3 r1, vec3 pSun) {
	float iSun = 22.0;
	vec3 kRlh = vec3(5.5e-6, 13.0e-6, 22.4e-6);
	float kMie = 21e-6;
	float shRlh = 8e3;
	float shMie = 1.2e3;
	float g = 0.758;

    // Normalize the sun and view directions.
    vec3 r = normalize(r1 - r0);

	// Primary ray initialization.
    float iStepSize = distance(r0, r1) / float(iSteps);
    float iTime = 0.0;

    // Initialize accumulators for Rayleigh and Mie scattering.
    vec3 totalRlh = vec3(0,0,0);
    vec3 totalMie = vec3(0,0,0);

    // Initialize optical depth accumulators for the primary ray.
    float iOdRlh = 0.0;
    float iOdMie = 0.0;

    // Calculate the Rayleigh and Mie phases.
    float mu = dot(r, pSun);
    float mumu = mu * mu;
    float gg = g * g;
    float pRlh = 3.0 / (16.0 * PI) * (1.0 + mumu);
    float pMie = 3.0 / (8.0 * PI) * ((1.0 - gg) * (mumu + 1.0)) / (pow(1.0 + gg - 2.0 * mu * g, 1.5) * (2.0 + gg));

    // Sample the primary ray.
    for (int i = 0; i < iSteps; i++) {

        // Calculate the primary ray sample position.
        vec3 iPos = r0 + r * (iTime + iStepSize * 0.5);

        // Calculate the height of the sample.
        float iHeight = length(iPos + vec3(0,planetRadius,0)) - planetRadius;

        // Calculate the optical depth of the Rayleigh and Mie scattering for this step.
        float odStepRlh = exp(-iHeight / shRlh) * iStepSize;
        float odStepMie = exp(-iHeight / shMie) * iStepSize;

        // Accumulate optical depth.
        iOdRlh += odStepRlh;
        iOdMie += odStepMie;

        // Calculate the step size of the secondary ray.
        float jStepSize = rsi(iPos + vec3(0,planetRadius,0), pSun, atmosphereRadius).y / float(jSteps);

        // Initialize the secondary ray time.
        float jTime = 0.0;

        // Initialize optical depth accumulators for the secondary ray.
        float jOdRlh = 0.0;
        float jOdMie = 0.0;

        // Sample the secondary ray.
        for (int j = 0; j < jSteps; j++) {

            // Calculate the secondary ray sample position.
            vec3 jPos = iPos + pSun * (jTime + jStepSize * 0.5);

            // Calculate the height of the sample.
            float jHeight = length(jPos + vec3(0,planetRadius,0)) - planetRadius;

            // Accumulate the optical depth.
            jOdRlh += exp(-jHeight / shRlh) * jStepSize;
            jOdMie += exp(-jHeight / shMie) * jStepSize;

            // Increment the secondary ray time.
            jTime += jStepSize;
        }

        // Calculate attenuation.
        vec3 attn = exp(-(kMie * (iOdMie + jOdMie) + kRlh * (iOdRlh + jOdRlh)));

        // Accumulate scattering.
        totalRlh += odStepRlh * attn;
        totalMie += odStepMie * attn;

        // Increment the primary ray time.
        iTime += iStepSize;

    }

    // Calculate and return the final color.
    return iSun * (pRlh * kRlh * totalRlh + pMie * kMie * totalMie);
}

vec3 aerial_perspective(vec3 color, vec3 position, vec3 cameraPosition, vec3 sunDirection) {
	vec3 air = atmosphere(cameraPosition, position, sunDirection);
    return 1.0 - exp(-0.75 * air) + color;
}

void reverse_parameters(float r, float mu, float mu_s, float v,
						out float u_r, out float u_mu, out float u_mu_s, out float u_v) {
	float H = sqrt(atmosphereRadius * atmosphereRadius - planetRadius * planetRadius);
	float rho = sqrt(max(r * r - planetRadius * planetRadius, 0));
	float delta = r * r * mu * mu - rho * rho;

	u_r = rho / H;

	ivec3 size = textureSize(inscattering, 0);

	float hp = (size.y - 1.0) / size.y;
	float mu_horizon = -sqrt(1.0 - (planetRadius / r) * (planetRadius / r));
	if(mu > mu_horizon) {
		u_mu = 0.5 * (2.0 - hp) + 0.5 * hp * pow((mu - mu_horizon) / (1.0 - mu_horizon), 0.2);
	} else {
		u_mu = 0.5 * hp * pow((mu_horizon - mu) / (mu_horizon + 1.0), 0.2);
	};

	u_mu_s = clamp(0.5*(atan(max(mu_s, -0.45)*tan(1.26 * 0.75))
						/ 0.75 + (1.0 - 0.26)), 0, 1);

	u_v = v * 0.5 + 0.5;
}

vec4 texture4D(sampler3D sampler, vec4 P, int slices) {
	ivec3 size = textureSize(sampler, 0);
	size.z = size.z /  slices;
	P.xyz = (P.xyz * (size-vec3(1)) + vec3(0.5)) / size;

	float w = P.w * (slices-1);
	float fw = floor(w);
	float cw = ceil(w);
	float t = w - fw;

	vec3 P1 = vec3(P.xy, (P.z + fw) / slices);
	vec3 P2 = vec3(P.xy, (P.z + cw) / slices);

	return mix(texture(sampler,P1), texture(sampler,P2), t);
}

vec3 precomputed_transmittance(float r, float v) {
	vec2 size = textureSize(transmittance, 0);
	r = clamp(r, planetRadius, atmosphereRadius);
	vec2 P = vec2((r - planetRadius) / (atmosphereRadius - planetRadius), v * 0.5 + 0.5);
	return texture(transmittance, (P * (size-1) + 0.5) / size).rgb;
}

vec3 precomputed_transmittance2(vec3 x, vec3 y) {
	float v = dot(normalize(x), normalize(x - y));
	vec3 t1 = precomputed_transmittance(length(x), v);
	vec3 t2 = precomputed_transmittance(length(y), v);
	if(t1.x == 0 || t1.y == 0 || t1.z == 0)
		return vec3(0);
	return t2 / t1;
}

vec3 precomputed_atmosphere(vec3 x, vec3 x0, vec3 sun_normalized) {
	vec3 v_normalized = normalize(x0 - x);
	vec3 x_normalized = normalize(x);

	float r = clamp(length(x), planetRadius, atmosphereRadius);
	float mu = dot(v_normalized, x_normalized);
	float mu_s = dot(sun_normalized, x_normalized);
	float v = dot(v_normalized, sun_normalized);

	float u_r, u_mu, u_mu_s, u_v;
	reverse_parameters(r, mu, mu_s, v, u_r, u_mu, u_mu_s, u_v);

	if(u_mu <= 0.5)
		u_mu = clamp(u_mu, 0.0, 0.5 - 0.5 / textureSize(inscattering,0).y);
	else
		u_mu = clamp(u_mu, 0.5 + 0.5 / textureSize(inscattering,0).y, 1.0);

	//	return vec3(fract((u_mu - 0.5)*128));

	vec4 t = texture4D(inscattering, vec4(u_r, u_mu, u_mu_s, u_v), 8);
	vec3 rayleigh = t.rgb * rayleigh_phase(v);
	vec3 mie = t.rgb * t.a / t.r * mie_phase(v) / rayleigh_Bs;
	return 10 * (rayleigh + mie);
}

vec3 precomputed_atmosphere2(vec3 x, vec3 x0, vec3 sun_normalized, out float u_mu,
							 bool force_miss_ground, bool force_hit_ground) {
	vec3 v_normalized = normalize(x0 - x);
	vec3 x_normalized = normalize(x);

	float r = max(length(x), planetRadius);
	if(r > atmosphereRadius) {
		vec2 p = rsi(x, v_normalized, atmosphereRadius);
		if (p.x > p.y || p.y < 0.0) {
			return vec3(0);
		}
		x = x + v_normalized * max(p.x, 0.0);
		x_normalized = normalize(x);
		r = length(x);
	}
	float mu = dot(v_normalized, x_normalized);
	float mu_s = dot(sun_normalized, x_normalized);
	float v = dot(v_normalized, sun_normalized);

	float u_r, u_mu_s, u_v;
	reverse_parameters(r, mu, mu_s, v, u_r, u_mu, u_mu_s, u_v);

	if(force_hit_ground) {
		u_mu = min(u_mu, 0.5 - 0.5 / textureSize(inscattering,0).y);
	} else if(force_miss_ground) {
		u_mu = max(u_mu, 0.5 + 0.5 / textureSize(inscattering,0).y);
	}

	if(force_miss_ground && u_mu <= 0.5) {
		u_mu = 1.0;
	} else if(force_hit_ground && u_mu >= 0.5) {
		u_mu = 0.0;
	}

	vec4 t = texture4D(inscattering, vec4(u_r, u_mu, u_mu_s, u_v), 8);
	vec3 rayleigh = t.rgb*rayleigh_phase(v);
	vec3 mie = t.rgb * t.a / max(t.r,1e-9) * mie_phase(v);

	return rayleigh + mie;
}

vec3 precomputed_aerial_perspective(vec3 color, vec3 position, vec3 cameraPosition,
									vec3 sunDirection) {
	vec4 hwp = worldToWarped * vec4(position, 1);
	vec4 hwc = worldToWarped * vec4(cameraPosition, 1);
	vec4 hws = worldToWarped * vec4(sunDirection, 0);
	vec3 wp = hwp.xyz / hwp.w;
	vec3 wc = hwc.xyz / hwc.w;
	vec3 ws = normalize(hws.xyz);

	vec3 t = precomputed_transmittance2(wc, wp);

	float u_mu;
	vec3 i0 = precomputed_atmosphere2(wc, wp, ws, u_mu, false, false);
	vec3 i1 = precomputed_atmosphere2(wp, wp + (wp - wc), ws, u_mu, u_mu > 0.5, u_mu < 0.5);
	vec3 inscattering = i0 - t * i1;
	//	if(u_mu < 0.5) return vec3(0);
	//	return 100 * (i1 - t * i0);
	// if(inscattering.x <= 0 || inscattering.y <= 0 || inscattering.z <= 0)
	// 	return vec3(1,0,0);

	// if(distance(wc, wp) > 100000) return vec3(1,0,0);
	// if(t.x > .991) return vec3(0);

	return color + 10 * max(inscattering, vec3(0));
}
