#line 2

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform UniformBlock {
	ivec2 position;
	ivec2 origin;
	float spacing;
	int in_slot;
	int out_slot;
	int level_resolution;
	uint face;
} ubo;

layout(r32f, binding = 1) uniform image2DArray heightmaps;

shared vec4 h[10][10];

void main() {
	uint x = gl_LocalInvocationID.x;
	uint y = gl_LocalInvocationID.y;

	// Load parent heights
	if (x < 5 && y < 5) {
		ivec3 origin = ivec3(ubo.origin+gl_WorkGroupID.xy*4, ubo.in_slot);
		ivec3 gpos = origin + ivec3(gl_LocalInvocationID.xy*2-ivec2(2), 0);
		h[x*2][y*2] = imageLoad(heightmaps, gpos);
		h[x*2+1][y*2] = imageLoad(heightmaps, gpos + ivec3(1,0,0));
		h[x*2][y*2+1] = imageLoad(heightmaps, gpos + ivec3(0,1,0));
		h[x*2+1][y*2+1] = imageLoad(heightmaps, gpos + ivec3(1,1,0));
	}
	barrier();

	// Compute slopes
	if (x < 8 && y < 8) {
		h[x+1][y+1].y = (h[x+2][y+1].x - h[x][y+1].x) * 0.5;
		h[x+1][y+1].z = (h[x+1][y+2].x - h[x+1][y].x) * 0.5;
		h[x+1][y+1].w = (h[x+2][y+2].x - h[x][y+1].x - h[x+1][y].x + h[x+1][y+1].x) * 0.5;
	}
	barrier();

	// Bicubic Interpolation
	x = x/2 + 2;
	y = y/2 + 2;
	vec2 t = vec2(gl_GlobalInvocationID.xy%2)/2.0;


	mat4 Binv = mat4(1, 0, -3, 2,
					 0, 0, 3, -2,
					 0, 1, -2, 1,
					 0, 0, -1, 1);
	mat4 F = mat4(h[x][y].x,   h[x+1][y].x,   h[x][y].y,   h[x+1][y].y,
				  h[x][y+1].x, h[x+1][y+1].x, h[x][y+1].y, h[x+1][y+1].y,
				  h[x][y].z,   h[x+1][y].z,   h[x][y].w,   h[x+1][y].w,
				  h[x][y+1].z, h[x+1][y+1].z, h[x][y+1].w, h[x+1][y+1].w);
	mat4 M = Binv * F * transpose(Binv);
	vec4 xx = vec4(1, t.x, t.x*t.x, t.x*t.x*t.x);
	vec4 yy = vec4(1, t.y, t.y*t.y, t.y*t.y*t.y);
	vec4 ddx = vec4(0, 1, 2*t.x, 3*t.x*t.x);
	vec4 ddy = vec4(0, 1, 2*t.y, 3*t.y*t.y);
	float height = dot(xx * M, yy);
	float dx = dot(ddx * M, yy) / ubo.spacing;
	float dy = dot(xx * M, ddy) / ubo.spacing;
	// float dxy = dot(ddx * M, ddy) / (ubo.spacing*ubo.spacing);
	float slope = length(vec2(dx, dy));


	// Calculate position
	ivec3 position;
	ivec2 position2 = ivec2(gl_GlobalInvocationID.xy)+ubo.position;
	if (ubo.face == 0) position = ivec3( ubo.level_resolution/2,   position2.x,             -position2.y);
	if (ubo.face == 1) position = ivec3(-ubo.level_resolution/2,  -position2.x,             -position2.y);
	if (ubo.face == 2) position = ivec3( position2.x,              ubo.level_resolution/2,   position2.y);
	if (ubo.face == 3) position = ivec3(-position2.x,             -ubo.level_resolution/2,   position2.y);
	if (ubo.face == 4) position = ivec3( position2.x,             -position2.y,              ubo.level_resolution/2);
	if (ubo.face == 5) position = ivec3(-position2.x,             -position2.y,             -ubo.level_resolution/2);

	// If we are on the edge of a tile, then make sure our slope matches what is on the other side
	// of the seam (by setting both to zero).
	if (any(greaterThanEqual(abs(position2), ivec2(ubo.level_resolution/2)))) {
		slope = 0;
	}

	// Apply noise
	float n = pow(random(uvec3(position+ubo.level_resolution/2)), 2);
	height += n * ubo.spacing * mix(0.1, 0.4, smoothstep(0.4, 0.5, slope))*0;

	// Write output
	imageStore(heightmaps, ivec3(gl_GlobalInvocationID.xy, ubo.out_slot), vec4(height, 0, 0, 0));
}
